# .github/workflows/version.yml
name: Git Version

on:
  push:
    branches:
      - test-cd-docker
      - release
  pull_request:
    branches:
      - main

jobs:
  version:
    runs-on: ubuntu-22.04
    permissions:
      # https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
      contents: write
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }} # checkout the correct branch name
          fetch-depth: 0 # fetch the whole repo history

      - uses: paulhatch/semantic-version@v5.0.0-beta
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: "api_back/v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "/^AB#[0-9]+ feat!:.*$/"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: "g"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          # minor_pattern: "AB#/[0-9]/g feat:"
          minor_pattern: "/^AB#[0-9]+ feat:.*$/"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: "g"
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "src/mymodule"
          # Named version, will be used as suffix for name version tag
          #namespace: my-service
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          #user_format_type: "csv"

      - name: Echo tag version
        run: |
          echo "Tag: ${{ steps.version.outputs.version_tag }}"
          echo "Semver: ${{ steps.version.outputs.version_tag }}"
          echo "Version code: ${{ steps.version.outputs.version_tag }}"

      - name: Tag Release
        # https://github.com/marketplace/actions/create-update-tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ steps.version.outputs.version_tag }}
          message: "Releasing version ${{ steps.version.outputs.version_tag }}"
