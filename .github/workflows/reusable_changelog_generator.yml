# Reusable changelog generator workflow
name: Reusable ChangeLog Gen

on:
  # Event to call "import" this workflow from a caller a workflow
  workflow_call:
    # input string to be provided by the caller workflow
    inputs:
      scope:
        required: true
        type: string
        default: "none"
        description: "module scope name"
      fromTag:
        required: false
        type: string
        default: "none"
        description: "describes the lower bound to process pull requests for"
      toTag:
        required: false
        type: string
        default: "none"
        description: "describes the upper bound to process pull request for"

      
    # output version to be used in the caller workflow
    outputs:
      changelog:
        description: "changelog in markdown format"
        value: ${{ jobs.changelo_generator.outputs.generated_changelog }}

    secrets:
      GIT_TOKEN:
        required: true        

jobs:
  # changelog generator job
  changelo_generator:
    runs-on: ubuntu-22.04
    name: Changelog Generator

    outputs:
      generated_changelog: ${{ steps.print_changelog.outputs.changelog }}

    steps:
      # clones current repository
      - name: Clone Repository
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0 # fetch the whole repo history

      # Build changelog
      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v3.7.0
        with:
          fromTag: ${{ inputs.fromTag }}
          toTag: ${{ inputs.toTag }}
          fetchReviewers: false
          fetchReleaseInformation: true
          includeOpen: false
          failOnError: true
          configuration: ".changelogrc"
          configurationJson: |
            {
              "categories": [
                {
                  "title": "## 🚀 Features",
                  "labels": [
                    "feat(${{ inputs.scope }})"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 🐛 Fixes",
                  "labels": [
                    "fix"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 🧪 Tests",
                  "labels": [
                    "test(${{ inputs.scope }})"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 🧵 Style",
                  "labels": [
                    "style(${{ inputs.scope }})"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 📚 Documentation",
                  "labels": [
                    "docs"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 🏋️‍♂️ Refactor",
                  "labels": [
                    "refactor(${{ inputs.scope }})"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 📐 CI Pipelines",
                  "labels": [
                    "ci(${{ inputs.scope }})"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 🪜 CD Pipelines",
                  "labels": [
                    "cd(${{ inputs.scope }})"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 🚿 Chores",
                  "labels": [
                    "chore(${{ inputs.scope }})"
                  ],
                  "exhaustive": true
                },
                {
                  "title": "## 🍔 Builds",
                  "labels": [
                    "build(${{ inputs.scope }})"
                  ],
                  "exhaustive": true
                }             
              ],
              "sort": {
                "order": "ASC",
                "on_property": "mergedAt"
              },
              "template": "All notable changes to this project will be documented in this file.\n\n## Changes #{{RELEASE_DIFF}}\n\n#{{CHANGELOG}}",
              "pr_template": "- ##{{NUMBER}} #{{TITLE}} @#{{AUTHOR}}",
              "label_extractor": [
                {
                  "pattern": ".*(feat\\(${{ inputs.scope }}\\)).*",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": "^AB#[0-9]+ \b(fix)\b",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": ".*(test\\(${{ inputs.scope }}\\)).*",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": ".*(style\\(${{ inputs.scope }}\\)).*",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": "^AB#[0-9]+ \b(docs)\b",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": ".*(refactor\\(${{ inputs.scope }}\\)).*",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": ".*(ci\\(${{ inputs.scope }}\\)).*",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": ".*(cd\\(${{ inputs.scope }}\\)).*",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": ".*(chore\\(${{ inputs.scope }}\\)).*",
                  "target": "$1",
                  "on_property": "title"
                },
                {
                  "pattern": ".*(build\\(${{ inputs.scope }}\\)).*",
                  "target": "$1",
                  "on_property": "title"
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

      # return changelog as output variable
      - name: Echo changelog
        id: print_changelog
        run: |
          echo "changelog=${{ steps.build_changelog.outputs.changelog }}" >> $GITHUB_OUTPUT
